// Generated by CoffeeScript 1.3.1
var Hook, async, tropoProvisioning, tropoSession, tropowebapi,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

async = require("async");

Hook = require('hook.io').Hook;

tropowebapi = require("tropo-webapi");

tropoProvisioning = require("tropo-webapi/lib/tropo-provisioning.js");

tropoSession = require("tropo-webapi/lib/tropo-session.js");

require('pkginfo')(module, 'version', 'hook');

exports.TropoHook = (function(_super) {

  __extends(TropoHook, _super);

  TropoHook.name = 'TropoHook';

  function TropoHook(options) {
    this.sendSMS = __bind(this.sendSMS, this);

    this.initiateSession = __bind(this.initiateSession, this);

    var _this = this;
    options.events = require('./eventMap');
    Hook.call(this, options);
    this.on("hook::ready", function() {});
  }

  TropoHook.prototype.initiateSession = function(params, cb) {
    var session;
    session = new tropoSession.TropoSession();
    session.makeApiCall(this.token, params);
    return session.on("responseBody", function(body) {
      return cb(null, body);
    });
  };

  TropoHook.prototype.sendSMS = function(messageBody, senderPhoneNumber, recipientPhoneNumber, callback) {
    return this.initiateSession({
      requestType: "sms",
      messageBody: messageBody,
      senderPhoneNumber: senderPhoneNumber || this.senderPhoneNumber,
      recipientPhoneNumber: recipientPhoneNumber
    }, callback);
  };

  TropoHook.prototype.listPhoneNumbersInPool = function(fieldToReturn, cb) {
    var p;
    if (!cb) {
      cb = fieldToReturn;
      fieldToReturn = null;
    }
    p = new tropoProvisioning.TropoProvision(this.username, this.password);
    p.viewAddresses(this.applicationID, "number");
    return p.addListener("responseBody", function(body) {
      body = JSON.parse(body);
      return async.map(body, function(obj, mapCb) {
        if (typeof fieldToReturn === "string") {
          return mapCb(null, obj[fieldToReturn]);
        } else {
          return mapCb(null, obj);
        }
      }, cb);
    });
  };

  TropoHook.prototype.integerizePrefix = function(thePrefix) {
    if (typeof thePrefix === "string") {
      thePrefix = parseInt(thePrefix.replace(/^1/, ""), 10);
    }
    if (typeof thePrefix !== "number" || isNaN(thePrefix) || thePrefix < 100) {
      return null;
    } else {
      return thePrefix;
    }
  };

  TropoHook.prototype.sanitizeNumber = function(number) {
    return number != null ? number.replace(/^\+1/, "") : void 0;
  };

  TropoHook.prototype.listAreaCodesInPool = function(cb) {
    return this.listPhoneNumbersInPool("prefix", function(err, prefixes) {
      return async.map(prefixes, function(prefix, mapCb) {
        return mapCb(null, this.integerizePrefix(prefix));
      }, cb);
    });
  };

  TropoHook.prototype.getAreaCodeToPhoneNumberHash = function(cb) {
    var hash;
    hash = {};
    return this.listPhoneNumbersInPool(function(err, numbers) {
      return async.forEach(numbers, function(number, forCb) {
        var prefix;
        prefix = this.integerizePrefix(number.prefix);
        if (prefix != null) {
          hash[prefix] = this.sanitizeNumber(number.number);
        }
        return forCb();
      }, function(err) {
        return cb(err, hash);
      });
    });
  };

  TropoHook.prototype.getNumberForAreaCode = function(areaCode, cb) {
    return this.getAreaCodeToPhoneNumberHash(function(err, numbers) {
      var p, responseCode, tropoAreaCode;
      if (typeof areaCode === "string") {
        areaCode = parseInt(areaCode, 10);
      }
      if (numbers[areaCode] != null) {
        return cb(null, numbers[areaCode]);
      } else {
        p = new tropoProvisioning.TropoProvision(this.username, this.password);
        tropoAreaCode = "1" + areaCode;
        p.updateApplicationAddress(this.applicationID, "number", tropoAreaCode, null, null, null, null, null, null, null);
        responseCode = null;
        return p.addListener("responseCode", function(code) {
          if (code === 200) {
            return this.getAreaCodeToPhoneNumberHash(function(err, numbers) {
              if (numbers[areaCode] != null) {
                return cb(null, numbers[areaCode]);
              } else {
                return cb("could not create new phone number");
              }
            });
          } else {
            return cb("could not create new phone number");
          }
        });
      }
    });
  };

  return TropoHook;

})(Hook);

exports.TropoHook.addTropoEndpoints = function(app, callbacks) {
  return app.post("/tropo", function(req, res) {
    var tropo, _ref, _ref1, _ref2;
    tropo = new tropowebapi.TropoWebAPI();
    console.log("*** tropo request received");
    console.log(req.body);
    console.log("********");
    if (((_ref = req.body.session) != null ? _ref.parameters : void 0) != null) {
      if (typeof (callbacks != null ? callbacks.receivedMessage : void 0) === "function") {
        return callbacks.receivedMessage(req.body.session, req, res);
      }
    } else {
      if ((((_ref1 = req.body.session) != null ? (_ref2 = _ref1.to) != null ? _ref2.channel : void 0 : void 0) != null) === "VOICE") {
        if (typeof (callbacks != null ? callbacks.receivingCall : void 0) === "function") {
          return callbacks.receivingCall(req.body.session, req, res);
        }
      }
    }
  });
};
